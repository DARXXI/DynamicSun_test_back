// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Weather.Repository;

#nullable disable

namespace Weather.Repository.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Weather.Domain.Entities.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cloudness")
                        .HasColumnType("integer")
                        .HasColumnName("Облачность");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Число");

                    b.Property<double?>("DewPoint")
                        .HasColumnType("double precision")
                        .HasColumnName("Точка росы");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("Влажность");

                    b.Property<int?>("LowCloudBoundary")
                        .HasColumnType("integer")
                        .HasColumnName("Нижняя граница облачности");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Погодные явления");

                    b.Property<int?>("Pressure")
                        .HasColumnType("int")
                        .HasColumnName("Давление");

                    b.Property<double?>("Temprature")
                        .HasColumnType("double precision")
                        .HasColumnName("Температура");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("Время");

                    b.Property<int?>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("Видимость");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text")
                        .HasColumnName("Направление ветра");

                    b.Property<int?>("WindSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("Скорость ветра");

                    b.HasKey("Id");

                    b.ToTable("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
